# JDBC Connection url for the database(MariaDB) - mariadb, mysql은 테이블 만들 때 utf-8 확인.
spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
spring.datasource.url=jdbc:mariadb://localhost:3306/instargram?characterEncoding=UTF-8&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=1234

#MYBATIS
mybatis.mapper-locations=classpath:mapper/**/**.xml

#JPA[영속성 컨텍스트 설정] -> spring.io에서 springboot 해당 버전(2.3.3) Reference Doc 들어가서 확인
#https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#common-application-properties

# create, create-drop, validate, update, none
spring.jpa.hibernate.ddl-auto=update
# DDL 생성시 데이터베이스고유의 기능을 사용하는지에 대한 유무
spring.jpa.generate-ddl=false
# jpa나 hibernate를 통해 CRUD를 실행하면 해당 CRUD의 SQL 로깅을 보여줄지에 대한 유무
spring.jpa.show-sql=true
# 사용하는 데이터베이스를 지정
spring.jpa.database=mysql
# 사용하려는 데이터베이스에 맞는 Dialect 지정(hibernate가 각 데이터베이스에 맞게 SQL을 처리해주기 위해서) : 버전이 올라가면서 Dialect의 버전을 입력 안해줘도 찾아감
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect
# 하이버네이트 전용 속성 : 로깅에 표시되는 SQL을 보기 좋게 바꿔주는 기능
spring.jpa.properties.hibernate.format_sql=true

# 하이버네이트 전용 속성 : default_batch_fetch_size => in query를 날려준다. 쿼리를 미리 날려서 데이터를 미리 가져와주는걸 in query라고 한다.
# N + M 문제 해결하는 방법
spring.jpa.properties.hibernate.default_batch_fetch_size=500

# hibernate logging level 설정 -> info, debug가 있는데 debug가 좀 더 자세히 보여준다.
logging.level.org.hibernate.sql=info
# hibernate logging type 설정 -> trace로 설정 해놓으면 로깅에 ?에 해당하는 데이터를 따로 출력해준다.
logging.level.org.hibernate.type=trace

# 테이블, 컬럼명 생성 전략 1 (테이블이나 컬럼명을 명시하지 않을 때 논리명 적용) - default
spring.jpa.hibernate.naming.implicit-strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy

# 테이블, 컬럼명 생성 전략 2 (테이블이나 컬럼명을 명시하지 않을 때 물리명 적용) - default
#spring.jpa.hibernate.naming.physical-strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy

# 테이블, 컬럼명 생성 전략 3 -> 카멜케이스로 생성
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

# OSIV[Open Session In View) : true가 default
# OSIV를 끄면(false) 모든 지연로딩을 트랜잭션 안에서 처리해줘야 한다.
# OSIV가 false로 설정되어 있으면 세션이 서비스단에서 종료가 되기 때문에 컨트롤러단에서 LAZY로 잡혀있는 객체를 호출을 못한다.(컨트롤러에서 sysout찍어놓으면 에러나는 이유임)
# OSIV가 true라는 뜻은 view단까지 세션을 open한다는 뜻. 원래 false면 세션이 서비스단이 종료될 때 끝나지만 true이면 컨트롤러 단까지 유지된다.
spring.jpa.open-in-view=true

# 스프링부트에서 REST API PUT, DELETE 사용시 추가
spring.mvc.hiddenmethod.filter.enabled=true

# 스프링부트 2.7.0 이상에서 mustache 한글 깨질 시 추가
server.servlet.encoding.force-response=true

# 업로드 파일 용량 설정(default=1048576 Byte = 약 1MB)
spring.servlet.multipart.max-file-size=500MB

# 스프링부트 3버전 이상부터(중요)
# 요청 경로를 ControllerHandler에 매칭시키기 위한 전략의 기본 값
# spring.mvc.pathmatch.matching-strategy 기본 값이 ant_path_matcher 에서 path_pattern_parser 로 변경됨
spring.mvc.pathmatch.matching-strategy=ant_path_matcher

# 프로필 이미지 파일 경로(노트북)
profileImg.path=D:/workspace(vsc)/upload/profile/
# 프로필 이미지 파일 경로(회사)
#profileImg.path=C:/HANSSAK/SecureGate/Download/workspace(react)/upload/profile/

# 스토리 이미지 파일 경로(노트북)
storyImg.path=D:/workspace(vsc)/upload/story/
# 스토리 이미지 파일 경로(회사)
#storyImg.path=C:/HANSSAK/SecureGate/Download/workspace(react)/upload/story/

# oauth2-client : facebook => 구현 보류
#spring.security.oauth2.client.registration.facebook.client-id=532849049116178
#spring.security.oauth2.client.registration.facebook.client-secret=b369e1a38d3f14dc5756425bf8b8629d
#spring.security.oauth2.client.registration.facebook.scope=public_profile, email

# registration(naver) : GET :/oauth2/authorization/naver 로 login 요청
spring.security.oauth2.client.registration.naver.client-name=naver
spring.security.oauth2.client.registration.naver.client-id=M_KIfj2yuhh2GNJNd68j
spring.security.oauth2.client.registration.naver.client-secret=73dxgX5a0i
spring.security.oauth2.client.registration.naver.redirect-uri=http://localhost:8080/login/oauth2/code/naver
spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.naver.scope=name,email

# jsessionId 붙는거 방지
server.servlet.session.tracking-modes=cookie

# provider(naver)
spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
spring.security.oauth2.client.provider.naver.token-uri=https://nid.naver.com/oauth2.0/token
spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
spring.security.oauth2.client.provider.naver.user-name-attribute=response

# registration(google)
spring.security.oauth2.client.registration.google.client-name=google
spring.security.oauth2.client.registration.google.client-id=282530367559-u62d5hudvn2fcoksmr7bjsrogkbnuckk.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=282530367559-u62d5hudvn2fcoksmr7bjsrogkbnuckk.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/login/oauth2/code/google
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.google.scope=profile,email

# provider(google) -> google에서는 provider 값이 spring-oauth2 의존성 안에 포함되어 있어서 따로 기입 안해줘도 된다.